"----- Vim-Plug ------
" Download via
" $ curl -fLo ~/.vim/autoload/plug.vim --create-dirs "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')
let mapleader=","

" really good highlight for a lot of languages
Plug 'sheerun/vim-polyglot'

Plug 'tpope/vim-sensible'

" Utility functions for vim scripts
Plug 'vim-scripts/L9'

" Git wrapper, see https://github.com/tpope/vim-fugitive
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-scriptease'

" <Leader><Leader>f<letter> to move forward to a certain occurence of the
" letter
Plug 'easymotion/vim-easymotion'
let g:EasyMotion_smartcase = 1

" Linter
Plug 'vim-syntastic/syntastic'
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_check_on_write = 1

Plug 'terryma/vim-multiple-cursors'

" Monokai inspired colorscheme
Plug 'tomasr/molokai'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'mileszs/ack.vim'
" let g:ackprg='rg --vimgrep'
let g:ackprg='rg --smart-case --no-heading -n'

" Better linux command interaction
Plug 'tpope/vim-eunuch'

" easy alignment commands
Plug 'tsaleh/vim-align'

" file explorer
Plug 'scrooloose/nerdtree'
map <F2> :NERDTreeToggle<CR>
map <F7> :NERDTreeFind<CR>

Plug 'jszakmeister/markdown2ctags'

" Code overview
Plug 'vim-scripts/Tagbar'
noremap <F3> :TagbarToggle<CR>
let g:tagbar_type_markdown = {
            \ 'ctagstype': 'markdown',
            \ 'ctagsbin' : '~/.vim/plugged/markdown2ctags/markdown2ctags.py',
            \ 'ctagsargs' : '-f - --sort=yes --sro=»',
            \ 'kinds' : [
            \ 's:sections',
            \ 'i:images'
            \ ],
            \ 'sro' : '»',
            \ 'kind2scope' : {
            \ 's' : 'section',
            \ },
            \ 'sort': 0
            \ }

" ctrl-p ftw
Plug 'vim-scripts/ctrlp.vim'
nnoremap <C-x> :CtrlPBufTagAll<CR>
nnoremap <C-y> :CtrlPBuffer<CR>

" change surrounding parathesis or quotes or ...
Plug 'vim-scripts/surround.vim'

" Code completion
" let g:python_host_prog = '/usr/bin/python2'
" let g:python3_host_prog = '/usr/bin/python3'
" Plug 'Valloric/YouCompleteMe', { 'do': './install.py  --clang-completer --cs-completer --go-completer --rust-completer --ts-completer --ninja'}
" nnoremap gd :YcmCompleter GoTo<CR>
" nnoremap ü :YcmCompleter GetType<CR>
" let g:ycm_always_populate_location_list = 1

" Conquer of Completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = ['coc-clangd', 'coc-pyright', 'coc-rust-analyzer', 'coc-texlab', 'coc-yaml', 'coc-markdownlint', 'coc-json']

" Latexsupport for vim
" Plug 'lervag/vimtex'

"Syntax Highlighting for Fish Shell
Plug 'aliva/vim-fish'

" Plug 'OmniSharp/omnisharp-vim'
Plug 'tpope/vim-dispatch'
"let g:dispatch_no_tmux_make = 1

" Toggle Location and Quickfix list
Plug 'Valloric/ListToggle'
let g:lt_location_list_toggle_map = '<leader>Q'
let g:lt_quickfix_list_toggle_map = '<leader>q'

" exchange to words with the command cx
Plug 'tommcdo/vim-exchange'

" Completion for unicode and digraph chars
" Plug 'unicode.vim'


" ]x [x for html encoding / decoding
Plug 'tpope/vim-unimpaired'

" Obsession
Plug 'tpope/vim-obsession'

Plug 'Chiel92/vim-autoformat'
noremap <leader>f :Autoformat<CR>

Plug 'MattesGroeger/vim-bookmarks'

Plug 'rust-lang/rust.vim'

" Initialize plugin system
call plug#end()


" Plugin Settings:
" vimtex:
let g:tex_flavor = 'latex'
let g:vimtex_view_method = 'zathura'

" airline:
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts=1
let g:airline_theme='minimalist'


" Costum Settings:
" Where swap files go
set directory=~/.vim/swap

set number
if has('nvim')
    set termguicolors
else
    set t_Co=256
endif
syntax on
colorscheme molokai
set wildmode=longest,list,full
set wildmenu

" Tab settings
set tabstop=4
set shiftwidth=4
set expandtab
"let ftplugin NOT override tabstop for python files
let g:python_recommended_style=0

" :SuperRetab 4 replaces all leftmost 4 whitespaces with one tab
command! -nargs=1 -range SuperRetab <line1>,<line2>s/\v%(^ *)@<= {<args>}/\t/g
set laststatus=2
" Soft wrap
set wrap linebreak nolist
if &shell =~# 'fish$'
    set shell=/bin/bash
endif

set grepprg=rg\ --smart-case\ --no-heading\ -n\ $*

" c++ indentation options:
"   N-s: no indent in namespace
"   g0: do not indent public: private: protected
set cino=t0N-sg0

" ignore case in search until there is a upper letter
set smartcase
set ignorecase

" find todos
noremap <F5> :vimgrep /todo/j % <CR>

" C/C++: switch between header and implementation
noremap <F6> :e %:p:s,.hpp$,.X123X,:s,.cpp$,.hpp,:s,.X123X$,.cpp,<CR>

" relative line numbers
set rnu

" Remove trailing spaces
autocmd BufWritePre *.py :%s/\s\+$//e
autocmd BufWritePre *.tex :%s/\s\+$//e
autocmd BufWritePre *.cs :%s/\s\+$//e
autocmd BufWritePre *.md :%s/\s\+$//e
autocmd BufWritePre *.vimrc :%s/\s\+$//e
autocmd BufWritePre *.c :%s/\s\+$//e
autocmd BufWritePre *.h :%s/\s\+$//e
autocmd BufWritePre *.cpp :%s/\s\+$//e
autocmd BufWritePre *.hpp :%s/\s\+$//e
autocmd BufWritePre *.h :%s/\s\+$//e
autocmd BufWritePre *.rs :%s/\s\+$//e
noremap <F4> :%s/\s\+$//e <CR>

" allow doxygen comments
autocmd Filetype c,cpp set comments^=:///

" Move through wrapped lines
" map j gj
" map k gk

" provide hjkl movements in Insert mode via the <Alt> modifier key
inoremap <A-h> <C-o>h
inoremap <A-j> <C-o>j
inoremap <A-k> <C-o>k
inoremap <A-l> <C-o>l

" big window
if has("gui_running")
    set lines=63 columns=200
    """ Gui Options
    " no menu or Toolbar in qvim oder gvim
    set guioptions-=m
    set guioptions-=T
    set guioptions-=L
    set guioptions-=l
    set guioptions-=r
    set guioptions-=R
endif

" disable blinking cursor
set guicursor+=a:blinkon0

" press - instead of <S-.> to reach the command line
nnoremap Ö :
vnoremap Ö :

nnoremap n nzz
vnoremap n nzz
nnoremap N Nzz
vnoremap N Nzz

" gradle syntax highlighting
au BufNewFile,BufRead *.gradle set filetype=groovy

" MSIL syntax highlighting
au BufNewFile,BufRead *.il set filetype=ilasm

" rubics arch pseudo syntax highlighting
au BufNewFile,BufRead *.arch set filetype=c
au BufNewFile,BufRead *.inc set filetype=c

au BufNewFile,BufRead *.tex set filetype=tex


" Not sure why backspace does not work, so better save than sorry
set backspace=indent,eol,start

" Quickfix window as big as content
" http://vim.wikia.com/wiki/Automatically_fitting_a_quickfix_window_height
au FileType qf call AdjustWindowHeight(1, 10)
function! AdjustWindowHeight(minheight, maxheight)
    let l = 1
    let n_lines = 0
    let w_width = winwidth(0)
    while l <= line('$')
        " number to float for division
        let l_len = strlen(getline(l)) + 0.0
        let line_width = l_len/w_width
        let n_lines += float2nr(ceil(line_width))
        let l += 1
    endw
    exe max([min([n_lines, a:maxheight]), a:minheight]) . "wincmd _"
endfunction

" Spellsuggest not too long
set spellsuggest=best,25
autocmd FileType gitcommit setlocal spell

" Add { and } as word separators
set iskeyword-={
set iskeyword-=}



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Coc recommended settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
" unicode characters in the file autoload/float.vim
set encoding=utf-8

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
" set nobackup
" set nowritebackup

" Give more space for displaying messages.
" set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
    " Recently vim can merge signcolumn and number column into one
    set signcolumn=number
else
    set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
else
    inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
            \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
        call CocActionAsync('doHover')
    else
        execute '!' . &keywordprg . " " . expand('<cword>')
    endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
" xmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" " Applying codeAction to the selected region.
" " Example: `<leader>aap` for current paragraph
" xmap <leader>a  <Plug>(coc-codeaction-selected)
" nmap <leader>a  <Plug>(coc-codeaction-selected)
"
" " Remap keys for applying codeAction to the current buffer.
" nmap <leader>ac  <Plug>(coc-codeaction)
" " Apply AutoFix to problem on the current line.
" nmap <leader>qf  <Plug>(coc-fix-current)
"
" " Map function and class text objects
" " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
" xmap if <Plug>(coc-funcobj-i)
" omap if <Plug>(coc-funcobj-i)
" xmap af <Plug>(coc-funcobj-a)
" omap af <Plug>(coc-funcobj-a)
" xmap ic <Plug>(coc-classobj-i)
" omap ic <Plug>(coc-classobj-i)
" xmap ac <Plug>(coc-classobj-a)
" omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" " Use CTRL-S for selections ranges.
" " Requires 'textDocument/selectionRange' support of language server.
" nmap <silent> <C-s> <Plug>(coc-range-select)
" xmap <silent> <C-s> <Plug>(coc-range-select)

" " Add `:Format` command to format current buffer.
" command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" " Add (Neo)Vim's native statusline support.
" " NOTE: Please see `:h coc-status` for integrations with external plugins that
" " provide custom statusline: lightline.vim, vim-airline.
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" set foldmethod=syntax

" Extra settings, probably device specific
silent! so ~/.vimrc_extra


" Project specific settings
" silent! so .vimlocal
